name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

jobs:
  format-check:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
      - name: Setup Melos
        run: dart pub global activate melos
      - name: Check format
        run: melos run format:check

  analyze:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
      - name: Setup Melos
        run: dart pub global activate melos
      - name: Bootstrap packages
        run: melos bs
      - name: Analyze
        run: melos run analyze

  run-benchmark-dart:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]
        compilation: [jit, aot]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
      - name: Run pub get
        working-directory: packages/cli
        run: dart pub get
      - name: Install Realm binaries
        working-directory: packages/cli
        run: dart run realm_dart install
      - name: Install Objectbox binaries
        working-directory: packages/cli
        shell: bash
        run: |
          eval "$(curl -s https://raw.githubusercontent.com/objectbox/objectbox-dart/main/install.sh)"
      - name: Run benchmark (JIT)
        if: ${{ matrix.compilation == 'jit' }}
        working-directory: packages/cli
        run: dart bin/cli.dart run --abort-on-exception
      - name: Run benchmark (AOT)
        if: ${{ matrix.compilation == 'aot' }}
        shell: bash
        working-directory: packages/cli
        run: bin/cli_aot.sh run --abort-on-exception
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name:
            benchmark_results_dart_${{ matrix.os }}_${{ matrix.compilation
            }}.csv
          path: packages/cli/benchmark_results_*.csv

  run-benchmark-flutter:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Flutter dependencies on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          sudo apt-get install libsqlite3-dev
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
      - name: Enable Flutter platforms
        run: |
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
      - name: Ensure Flutter generated files exist
        working-directory: packages/runner_flutter
        run: flutter pub get
      - name: Run pub get
        working-directory: packages/runner_flutter
        run: flutter pub get
      - name: Run benchmark
        working-directory: packages/runner_flutter
        shell: bash
        run: |
          case ${{ runner.os }} in
            Linux)
              Xvfb :99 &
              export DISPLAY=:99
              device=linux
              ;;
            macOS)
              device=macos
              ;;
            Windows)
              device=windows
              ;;
          esac
          flutter drive -v --profile -d $device integration_test/benchmark_test.dart
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark_results_flutter_${{ matrix.os }}.csv
          path: packages/runner_flutter/benchmark_results_*.csv
